
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(nlsr)
> 
> # Various derivatives 
> 
> fnDeriv(quote(1 + x + y), c("x", "y"))
function (x, y) 
{
    .value <- 1 + x + y
    .grad <- array(0, c(length(.value), 2L), list(NULL, c("x", 
    "y")))
    .grad[, "x"] <- 1
    .grad[, "y"] <- 1
    attr(.value, "gradient") <- .grad
    .value
}
> 
> nlsDeriv( ~ log(x), "x")
1/x
> nlsDeriv( ~ log(x, base=3), "x" )
1/(x * 1.09861228866811)
> 
> nlsDeriv( ~ exp(x), "x")
exp(x)
> nlsDeriv( ~ sin(x), "x")
cos(x)
> nlsDeriv( ~ cos(x), "x")
-sin(x)
> nlsDeriv( ~ tan(x), "x")
1/cos(x)^2
> nlsDeriv( ~ sinh(x), "x")
cosh(x)
> nlsDeriv( ~ cosh(x), "x")
sinh(x)
> nlsDeriv( ~ sqrt(x), "x")
0.5/sqrt(x)
> nlsDeriv( ~ pnorm(q), "q")
dnorm(q)
> nlsDeriv( ~ dnorm(x, mean), "mean")
dnorm(x - mean) * (x - mean)
> nlsDeriv( ~ asin(x), "x")
1/sqrt(1 + x^2)
> nlsDeriv( ~ acos(x), "x")
-1/sqrt(1 + x^2)
> nlsDeriv( ~ atan(x), "x")
1/(1 + x^2)
> nlsDeriv( ~ gamma(x), "x")
gamma(x) * digamma(x)
> nlsDeriv( ~ lgamma(x), "x")
digamma(x)
> nlsDeriv( ~ digamma(x), "x")
trigamma(x)
> nlsDeriv( ~ trigamma(x), "x")
psigamma(x, 2L)
> nlsDeriv( ~ psigamma(x, deriv = 5), "x")
psigamma(x, 6)
> nlsDeriv( ~ x*y, "x")
y
> nlsDeriv( ~ x/y, "x")
1/y
> nlsDeriv( ~ x^y, "x")
y * x^(y - 1)
> nlsDeriv( ~ (x), "x")
[1] 1
> nlsDeriv( ~ +x, "x")
[1] 1
> nlsDeriv( ~ -x, "x")
[1] -1
> nlsDeriv( ~ abs(x), "x")
sign(x)
> nlsDeriv( ~ sign(x), "x")
[1] 0
> 
> # This was wrong...
> 
> nlsDeriv(expression(y), c("x", "y"))
[1] 0 1
> 
> # Various simplifications
> 
> nlsSimplify(quote(+(a+b)))
a + b
> nlsSimplify(quote(-5))
[1] -5
> nlsSimplify(quote(--(a+b)))
a + b
> 
> nlsSimplify(quote(exp(log(a+b))))
a + b
> nlsSimplify(quote(exp(1)))
[1] 2.718282
> 
> nlsSimplify(quote(log(exp(a+b))))
a + b
> nlsSimplify(quote(log(1)))
[1] 0
> 
> nlsSimplify(quote(!TRUE))
[1] FALSE
> nlsSimplify(quote(!FALSE))
[1] TRUE
> 
> nlsSimplify(quote((a+b)))
a + b
> 
> nlsSimplify(quote(a + b + 0))
a + b
> nlsSimplify(quote(0 + a + b))
a + b
> nlsSimplify(quote((a+b) + (a+b)))
2 * (a + b)
> nlsSimplify(quote(1 + 4))
[1] 5
> 
> nlsSimplify(quote(a + b - 0))
a + b
> nlsSimplify(quote(0 - a - b))
-a - b
> nlsSimplify(quote((a+b) - (a+b)))
[1] 0
> nlsSimplify(quote(5 - 3))
[1] 2
> 
> nlsSimplify(quote(0*(a+b)))
[1] 0
> nlsSimplify(quote((a+b)*0))
[1] 0
> nlsSimplify(quote(1L * (a+b)))
a + b
> nlsSimplify(quote((a+b) * 1))
a + b
> nlsSimplify(quote((-1)*(a+b)))
-(a + b)
> nlsSimplify(quote((a+b)*(-1)))
-(a + b)
> nlsSimplify(quote(2*5))
[1] 10
> 
> nlsSimplify(quote((a+b) / 1))
a + b
> nlsSimplify(quote((a+b) / (-1)))
-(a + b)
> nlsSimplify(quote(0/(a+b)))
[1] 0
> nlsSimplify(quote(1/3))
[1] 0.3333333
> 
> nlsSimplify(quote((a+b) ^ 1))
a + b
> nlsSimplify(quote(2^10))
[1] 1024
> 
> nlsSimplify(quote(log(exp(a), 3)))
a/1.09861228866811
> 
> nlsSimplify(quote(FALSE && b))
[1] FALSE
> nlsSimplify(quote(a && TRUE))
a
> nlsSimplify(quote(TRUE && b))
b
> 
> nlsSimplify(quote(a || TRUE))
[1] TRUE
> nlsSimplify(quote(FALSE || b))
b
> nlsSimplify(quote(a || FALSE))
a
> 
> nlsSimplify(quote(if (TRUE) a+b))
a + b
> nlsSimplify(quote(if (FALSE) a+b))
NULL
> 
> nlsSimplify(quote(if (TRUE) a+b else a*b))
a + b
> nlsSimplify(quote(if (FALSE) a+b else a*b))
a * b
> nlsSimplify(quote(if (cond) a+b else a+b))
a + b
> 
> # This one was wrong...
> nlsSimplify(quote(--(a+b)))
a + b
> 
> proc.time()
   user  system elapsed 
  0.290   0.036   0.310 
